{"ast":null,"code":"var _jsxFileName = \"S:\\\\React\\\\FoodOrderApp\\\\src\\\\store\\\\CartProvider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer } from 'react';\nimport CartContext from './cart-context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n};\n\nconst cartReducer = (state, action) => {\n  if (action.type === 'ADD') {\n    let updatedItems = state.items.concat(action.item);\n    const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n    const existingCartItemIndex = state.items.findIndex(item => item.id === action.item.id);\n    const existingCartItem = state.items[existingCartItemIndex];\n    let updatedItem; // let updatedItems;\n\n    if (existingCartItem) {\n      updatedItem = { ...existingCartItem,\n        amount: existingCartItem.amount + action.item.amount\n      };\n    } else {}\n\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  return defaultCartState;\n};\n\nexport const CartProvider = props => {\n  _s();\n\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\n\n  const addItemToCartHandler = item => {\n    dispatchCartAction({\n      type: 'ADD',\n      item: item\n    });\n  };\n\n  const removeItemFromCartHandler = id => {\n    dispatchCartAction({\n      type: 'REMOVE',\n      id: id\n    });\n  };\n\n  const cartContext = {\n    items: [],\n    totalAmount: 0,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CartProvider, \"PxEugEseoIJIbjFwtAJal5z5ClY=\");\n\n_c = CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["S:/React/FoodOrderApp/src/store/CartProvider.js"],"names":["React","useReducer","CartContext","defaultCartState","items","totalAmount","cartReducer","state","action","type","updatedItems","concat","item","updatedTotalAmount","price","amount","existingCartItemIndex","findIndex","id","existingCartItem","updatedItem","CartProvider","props","cartState","dispatchCartAction","addItemToCartHandler","removeItemFromCartHandler","cartContext","addItem","removeItem","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,WAAP,MAAwB,gBAAxB;;AAEA,MAAMC,gBAAgB,GAAG;AACrBC,EAAAA,KAAK,EAAE,EADc;AAErBC,EAAAA,WAAW,EAAE;AAFQ,CAAzB;;AAKA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACnC,MAAGA,MAAM,CAACC,IAAP,KAAgB,KAAnB,EAAyB;AACrB,QAAIC,YAAY,GAAGH,KAAK,CAACH,KAAN,CAAYO,MAAZ,CAAmBH,MAAM,CAACI,IAA1B,CAAnB;AACA,UAAMC,kBAAkB,GAAGN,KAAK,CAACF,WAAN,GAAoBG,MAAM,CAACI,IAAP,CAAYE,KAAZ,GAAoBN,MAAM,CAACI,IAAP,CAAYG,MAA/E;AAEA,UAAMC,qBAAqB,GAAGT,KAAK,CAACH,KAAN,CAAYa,SAAZ,CACzBL,IAAD,IAAUA,IAAI,CAACM,EAAL,KAAYV,MAAM,CAACI,IAAP,CAAYM,EADR,CAA9B;AAGA,UAAMC,gBAAgB,GAAGZ,KAAK,CAACH,KAAN,CAAYY,qBAAZ,CAAzB;AACA,QAAII,WAAJ,CARqB,CASrB;;AAEA,QAAGD,gBAAH,EAAoB;AAChBC,MAAAA,WAAW,GAAG,EACV,GAAGD,gBADO;AAEVJ,QAAAA,MAAM,EAAEI,gBAAgB,CAACJ,MAAjB,GAA0BP,MAAM,CAACI,IAAP,CAAYG;AAFpC,OAAd;AAKH,KAND,MAMO,CAEN;;AAED,WAAO;AACHX,MAAAA,KAAK,EAAEM,YADJ;AAEHL,MAAAA,WAAW,EAAEQ;AAFV,KAAP;AAIH;;AAED,SAAOV,gBAAP;AACH,CA7BD;;AA+BA,OAAO,MAAMkB,YAAY,GAAIC,KAAD,IAAW;AAAA;;AACnC,QAAM,CAACC,SAAD,EAAYC,kBAAZ,IAAkCvB,UAAU,CAACK,WAAD,EAAcH,gBAAd,CAAlD;;AAEA,QAAMsB,oBAAoB,GAAIb,IAAD,IAAU;AACnCY,IAAAA,kBAAkB,CAAC;AAACf,MAAAA,IAAI,EAAE,KAAP;AAAcG,MAAAA,IAAI,EAAEA;AAApB,KAAD,CAAlB;AACH,GAFD;;AAIA,QAAMc,yBAAyB,GAAIR,EAAD,IAAQ;AACtCM,IAAAA,kBAAkB,CAAC;AAACf,MAAAA,IAAI,EAAE,QAAP;AAAiBS,MAAAA,EAAE,EAAEA;AAArB,KAAD,CAAlB;AACH,GAFD;;AAIA,QAAMS,WAAW,GAAG;AAChBvB,IAAAA,KAAK,EAAE,EADS;AAEhBC,IAAAA,WAAW,EAAE,CAFG;AAGhBuB,IAAAA,OAAO,EAAEH,oBAHO;AAIhBI,IAAAA,UAAU,EAAEH;AAJI,GAApB;AAQA,sBACI,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEC,WAA7B;AAAA,cACKL,KAAK,CAACQ;AADX;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CAxBM;;GAAMT,Y;;KAAAA,Y","sourcesContent":["import React, { useReducer } from 'react';\r\nimport CartContext from './cart-context';\r\n\r\nconst defaultCartState = {\r\n    items: [],\r\n    totalAmount: 0\r\n};\r\n\r\nconst cartReducer = (state, action) => {\r\n    if(action.type === 'ADD'){\r\n        let updatedItems = state.items.concat(action.item);\r\n        const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount ;\r\n\r\n        const existingCartItemIndex = state.items.findIndex(\r\n            (item) => item.id === action.item.id\r\n        );\r\n        const existingCartItem = state.items[existingCartItemIndex];\r\n        let updatedItem;\r\n        // let updatedItems;\r\n\r\n        if(existingCartItem){\r\n            updatedItem = {\r\n                ...existingCartItem,\r\n                amount: existingCartItem.amount + action.item.amount\r\n\r\n            }\r\n        } else {\r\n\r\n        }\r\n\r\n        return {\r\n            items: updatedItems,\r\n            totalAmount: updatedTotalAmount\r\n        };\r\n    }\r\n\r\n    return defaultCartState;\r\n};\r\n\r\nexport const CartProvider = (props) => {\r\n    const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\r\n\r\n    const addItemToCartHandler = (item) => {\r\n        dispatchCartAction({type: 'ADD', item: item});\r\n    };\r\n\r\n    const removeItemFromCartHandler = (id) => {\r\n        dispatchCartAction({type: 'REMOVE', id: id});\r\n    };\r\n\r\n    const cartContext = {\r\n        items: [],\r\n        totalAmount: 0,\r\n        addItem: addItemToCartHandler,\r\n        removeItem: removeItemFromCartHandler\r\n    };\r\n\r\n\r\n    return (\r\n        <CartContext.Provider value={cartContext}>\r\n            {props.children}\r\n        </CartContext.Provider>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
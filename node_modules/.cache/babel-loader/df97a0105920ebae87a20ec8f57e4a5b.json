{"ast":null,"code":"var _jsxFileName = \"S:\\\\React\\\\FoodOrderApp\\\\src\\\\components\\\\Meals\\\\AvailableMeals.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport classes from './AvailableMeals.module.css';\nimport { Card } from '../UI/Card';\nimport { MealItem } from './MealItem/MealItem'; // const DUMMY_MEALS = [\n//     {\n//         id: 'm1',\n//         name: 'Sushi',\n//         description: 'Finest fish and veggies',\n//         price: 22.99,\n//     },\n//     {\n//         id: 'm2',\n//         name: 'Schnitzel',\n//         description: 'A german specialty!',\n//         price: 16.5,\n//     },\n//     {\n//         id: 'm3',\n//         name: 'Barbecue Burger',\n//         description: 'American, raw, meaty',\n//         price: 12.99,\n//     },\n//     {\n//         id: 'm4',\n//         name: 'Green Bowl',\n//         description: 'Healthy...and green...',\n//         price: 18.99,\n//     },\n// ];\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AvailableMeals = () => {\n  _s();\n\n  const [meals, setMeals] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [httpError, setHttpError] = useState(false);\n  useEffect(() => {\n    const fetchMeals = async () => {\n      const response = await fetch('https://mealplanner-9e0bb-default-rtdb.firebaseio.com/meals.json');\n      const responseData = await response.json();\n      const loadedMeals = [];\n      console.log(\"In the Available Meal 1\");\n      console.log(response);\n\n      if (!response.ok) {\n        throw new Error('Something Went Wrong');\n      }\n\n      console.log(\"In the Available Meal 2\");\n\n      for (const key in responseData) {\n        loadedMeals.push({\n          id: key,\n          name: responseData[key].name,\n          description: responseData[key].description,\n          price: responseData[key].price\n        });\n      }\n\n      setMeals(loadedMeals);\n      setIsLoading(false);\n    };\n\n    fetchMeals().catch(error => {\n      setIsLoading(false);\n      setHttpError(error.message);\n    });\n  }, []);\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: classes.MealsLoading,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"...Loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 16\n    }, this);\n  }\n\n  if (httpError) {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: classes.MealsError,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: httpError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 16\n    }, this);\n  }\n\n  const mealsList = meals.map(meal => /*#__PURE__*/_jsxDEV(MealItem, {\n    meal: meal\n  }, meal.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 43\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: classes.meals,\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: mealsList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AvailableMeals, \"5BB3zB1G5TPlSPeHzSJzCY+EgO0=\");\n\n_c = AvailableMeals;\n\nvar _c;\n\n$RefreshReg$(_c, \"AvailableMeals\");","map":{"version":3,"sources":["S:/React/FoodOrderApp/src/components/Meals/AvailableMeals.js"],"names":["React","useEffect","useState","classes","Card","MealItem","AvailableMeals","meals","setMeals","isLoading","setIsLoading","httpError","setHttpError","fetchMeals","response","fetch","responseData","json","loadedMeals","console","log","ok","Error","key","push","id","name","description","price","catch","error","message","MealsLoading","MealsError","mealsList","map","meal"],"mappings":"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","sourcesContent":["import React,{ useEffect, useState} from 'react';\r\nimport classes from './AvailableMeals.module.css'\r\nimport { Card } from '../UI/Card';\r\nimport { MealItem } from './MealItem/MealItem';\r\n\r\n// const DUMMY_MEALS = [\r\n//     {\r\n//         id: 'm1',\r\n//         name: 'Sushi',\r\n//         description: 'Finest fish and veggies',\r\n//         price: 22.99,\r\n//     },\r\n//     {\r\n//         id: 'm2',\r\n//         name: 'Schnitzel',\r\n//         description: 'A german specialty!',\r\n//         price: 16.5,\r\n//     },\r\n//     {\r\n//         id: 'm3',\r\n//         name: 'Barbecue Burger',\r\n//         description: 'American, raw, meaty',\r\n//         price: 12.99,\r\n//     },\r\n//     {\r\n//         id: 'm4',\r\n//         name: 'Green Bowl',\r\n//         description: 'Healthy...and green...',\r\n//         price: 18.99,\r\n//     },\r\n// ];\r\n\r\nexport const AvailableMeals = () => {\r\n    const [meals, setMeals] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [httpError, setHttpError] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const fetchMeals = async () => {\r\n            const response = await fetch('https://mealplanner-9e0bb-default-rtdb.firebaseio.com/meals.json')\r\n            const responseData = await response.json();\r\n\r\n            const loadedMeals = [];\r\n            console.log(\"In the Available Meal 1\");\r\n            console.log(response);\r\n            if(!response.ok){\r\n                throw new Error('Something Went Wrong');\r\n            }\r\n            console.log(\"In the Available Meal 2\");\r\n\r\n            for(const key in responseData){\r\n                loadedMeals.push({\r\n                    id: key,\r\n                    name: responseData[key].name,\r\n                    description: responseData[key].description,\r\n                    price: responseData[key].price,\r\n                })\r\n            }\r\n\r\n            setMeals(loadedMeals);\r\n            setIsLoading(false);\r\n        };\r\n\r\n        fetchMeals().catch((error) => {\r\n            setIsLoading(false);\r\n            setHttpError(error.message);\r\n        });\r\n    }, []);\r\n\r\n    if(isLoading){\r\n        return <section className={classes.MealsLoading}>\r\n            <p>...Loading</p>\r\n        </section>\r\n    }\r\n\r\n    if(httpError){\r\n        return <section className={classes.MealsError}>\r\n            <p>{httpError}</p>\r\n        </section>\r\n    }\r\n\r\n    const mealsList = meals.map((meal) => <MealItem key={meal.id} meal={meal}/>)\r\n\r\n    return (\r\n        <section className={classes.meals}>\r\n            <Card>\r\n                <ul>\r\n                    {mealsList}\r\n                </ul>\r\n            </Card>\r\n\r\n        </section>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}